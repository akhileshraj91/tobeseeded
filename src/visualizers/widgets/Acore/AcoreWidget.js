/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Wed Dec 08 2021 04:49:51 GMT+0000 (Coordinated Universal Time).
 */

// define(['css!./styles/AcoreWidget.css'], function () {
//     'use strict';
define(['jointjs','css!./styles/AcoreWidget.css'], function (joint) {
    'use strict';

    var WIDGET_CLASS = 'acore';

    function AcoreWidget(logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();

        this._logger.debug('actor finished');
    }

    AcoreWidget.prototype._initialize = function () {
        console.log(joint);
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        this._jointSM = new joint.dia.Graph;
        this._jointPaper = new joint.dia.Paper({
            el: this._el,
            width : width,
            height: height,
            model: this._jointSM,
            interactive: false
        });

        this._webgmeSM = null;

        // Create a dummy header
        // this._el.append('<h3>Acore Events:</h3>');

        // Registering to events can be done with jQuery (as normal)
        this._el.on('dblclick', function (event) {
            // event.stopPropagation();
            // event.preventDefault();
            // self.onBackgroundDblClick();
        });
    };

    AcoreWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    // Adding/Removing/Updating items
    // AcoreWidget.prototype.addNode = function (desc) {
    //     if (desc) {
    //         // Add node to a table of nodes
    //         var node = document.createElement('div'),
    //             label = 'children';

    //         if (desc.childrenIds.length === 1) {
    //             label = 'child';
    //         }

    //         this.nodes[desc.id] = desc;
    //         node.innerHTML = 'Adding node "' + desc.name + '" (click to view). It has ' +
    //             desc.childrenIds.length + ' ' + label + '.';

    //         this._el.append(node);
    //         node.onclick = this.onNodeClick.bind(this, desc.id);
    //     }
    AcoreWidget.prototype.initMachine = function (machineDescriptor) {
        const self = this;
        console.log(machineDescriptor);
        self._webgmeSM = machineDescriptor;
        self._webgmeSM.current = self._webgmeSM.init;
        const sm = self._webgmeSM;
         // first add the states
        Object.keys(sm.states).forEach(stateId => {
            let vertex = null;
            if (sm.init === stateId) {
                vertex = new joint.shapes.standard.Circle({
                    position: sm.states[stateId].position,
                    size: { width: 20, height: 20 },
                    attrs: {
                        body: {
                            fill: '#333333'
                        }
                    }
                });
            } else if (sm.states[stateId].isEnd) {
                vertex = new joint.shapes.standard.Circle({
                    position: sm.states[stateId].position,
                    size: { width: 30, height: 30 },
                    attrs: {
                        body: {
                            fill: '#999999'
                        }
                    }
                });
            } else {
                vertex = new joint.shapes.standard.Circle({
                    position: sm.states[stateId].position,
                    size: { width: 60, height: 60 },
                    attrs: {
                        label : {
                            text: sm.states[stateId].name,
                             //event: 'element:label:pointerdown',
                            fontWeight: 'bold',
                             //cursor: 'text',
                             //style: {
                             //    userSelect: 'text'
                             //}
                        },
                        body: {
                            strokeWidth: 3
                        }
                    }
                });
            }
            vertex.addTo(self._jointSM);
            sm.states[stateId].joint = vertex;
        });

         // then create the links
        Object.keys(sm.states).forEach(stateId => {
            const state = sm.states[stateId];
            Object.keys(state.next).forEach(event => {
                state.jointNext = state.jointNext || {};
                const link = new joint.shapes.standard.Link({
                    source: {id: state.joint.id},
                    target: {id: sm.states[state.next[event]].joint.id},
                    attrs: {
                        line: {
                            strokeWidth: 2
                        }
                    },
                    labels: [{
                        position: {
                            distance: 0.5,
                            offset: 0,
                            args: {
                                keepGradient: true,
                                ensureLegibility: true
                            }
                        },
                        attrs: {
                            text: {
                                text: event,
                                fontWeight: 'bold'
                            }
                        }
                    }]
                });
                link.addTo(self._jointSM);
                state.jointNext[event] = link;
            })
        });

         //now refresh the visualization
        self._jointPaper.updateViews();
    };
    AcoreWidget.prototype.destroyMachine = function () {
    };


    // AcoreWidget.prototype.removeNode = function (gmeId) {
    //     var desc = this.nodes[gmeId];
    //     this._el.append('<div>Removing node "' + desc.name + '"</div>');
    //     delete this.nodes[gmeId];
    // };

    // AcoreWidget.prototype.updateNode = function (desc) {
    //     if (desc) {
    //         this._logger.debug('Updating node:', desc);
    //         this._el.append('<div>Updating node "' + desc.name + '"</div>');
    //     }
    // };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    // AcoreWidget.prototype.onNodeClick = function (/*id*/) {
    //     // This currently changes the active node to the given id and
    //     // this is overridden in the controller.
    // };

    // AcoreWidget.prototype.onBackgroundDblClick = function () {
    //     this._el.append('<div>Background was double-clicked!!</div>');
    // };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    AcoreWidget.prototype.destroy = function () {
    };

    AcoreWidget.prototype.onActivate = function () {
        this._logger.debug('AcoreWidget has been activated');
    };

    AcoreWidget.prototype.onDeactivate = function () {
        this._logger.debug('AcoreWidget has been deactivated');
    };

    return AcoreWidget;
});
